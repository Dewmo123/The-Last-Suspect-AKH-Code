

enum EObjectType
{
	None,
	Pc,
    Parts
};

enum MapType 
{
    None,
    Japan,
    Dungeon,
    Castle,
    Island
};
enum PartsType 
{
    None,
    Slider,
    Body,
    Magazine,
    Trigger
};

struct PartsInfoBr
{
    int Index;
    FLocation Pos;
    PartsType type;
};

struct FLocation
{
	float			X;
	float			Y;
	float			Z;
};
#define Name_Length	64

struct PcInfoBr
{
    int Index;
    char Name[Name_Length];
    FLocation	Pos;
    FLocation	Dest;
    FLocation   Direction;
    float MoveSpeed;
    bool isGaming;
    Job MyJob;
};
enum Job
{
    None = 0,
    Murder,
    Economy,
    Police,
    Specture
};
struct RemoveBr
{
    int Index;
    EObjectType ObjectType;
};

struct MoveBr
{
    int Index;
    float speed;
    bool isWalk;
    bool IsWeapon;
    EObjectType ObjectType;
    FLocation	Pos;
    FLocation	Dest;
    FLocation   Dir;
    //    Direction은 클라이언트에서 연출
};
enum EAttackResult
{
    None = 0,
    Miss,           // 공격이 빗나감
    Kill,
    Double
};
struct AttackInfo
{
    int TargetIndex;
    int SkillId;
    FLocation Direction;
    Job Atker;
    FLocation Pos;
    FLocation Dest;
    float TimeOffset;

    // 추가된 변수들
    FLocation PostHitPosition;  // 타격 후 이동 위치
    float PostHitDirection;     // 타격 방향
};

struct AttackResult
{
    EAttackResult Result;
    int TarObjectIndex;
};
struct AttackBr
{
    int SrcObjectIndex;
    int TarObjectIndex;
    int SkillId;
    FLocation Direction;
    FLocation Pos;
    FLocation Dest;

    // 추가된 변수들
    FLocation PostHitPosition;  // 타격 후 이동 위치
    float PostHitDirection;     // 타격 방향

    float TimeOffset;
    EAttackResult Result;
};
enum EMoveResult
{
    None = 0,

    // 성공
    Success,                // 이동 성공

    // 실패 원인들
    Failed_Obstacle,        // 장애물로 인한 실패
    Failed_OutOfBounds,     // 경계를 벗어남
    Failed_NoPath,          // 경로가 없음
    Failed_Blocked,         // 다른 유닛에 의해 막힘
    Failed_Terrain,         // 지형으로 인한 실패 (예: 물/용암)
    Failed_Exhausted,       // 스태미나/행동력 부족
    Failed_Stunned,         // 기절 상태
    Failed_Rooted,          // 속박 상태
    Failed_Frozen,          // 빙결 상태
    Failed_Feared,          // 공포 상태
    Failed_Charmed,         // 매혹 상태
    Failed_Overencumbered,  // 과도한 무게로 인한 실패
    Failed_NoFlyingAbility, // 비행 능력 부족 (공중 이동 시)
    Failed_NoSwimmingAbility, // 수영 능력 부족 (수중 이동 시)
    Failed_Cooldown,        // 이동 능력 쿨다운 중
    Failed_InsufficientResource, // 자원 부족 (마나 등)
    Failed_TargetUnreachable, // 목표 지점에 도달 불가능
    Failed_InvalidMove,     // 유효하지 않은 이동

    // 특수 상황
    Partial_Success,        // 부분적 성공 (일부 거리만 이동)
    Teleported,             // 텔레포트로 이동 (일반 이동과 다른 경우)
    Pushed,                 // 밀려남 (강제 이동)
    Pulled,                 // 끌려감 (강제 이동)

    Max
};


interface C2SInGame
{
    void Heartbeat
    (
        in void
    );
	// 클라이언트에서 서버에게 리소스 로드가 모두 완료 되었다고 전달
    // 맵 로딩과 그리기가 완료된 후에 서버에 전송
    // 이 패킷을 전달하면 ZoneUpdate 패킷이 서버에서 전송되기 시작함
	void ResourceLoadComplete
	(
		in string Name,
        out int PcIndex,
        out bool isGaming
	);
    void CreateParts
    (
        out PartsInfoBr Info
    );

    // 존에 시야 범위에 들어오거나 스폰, 이동된 객체들의 정보를 받는 패킷
    void ZoneUpdate
    (
        out List<PcInfoBr> PcEnters,
        out List<PartsInfoBr> Parts,
        out List<MoveBr> Moves,
        out List<RemoveBr> Removes,
        out List<AttackBr> Attacks,
        out bool isGaming
	);

    // 이동 요청, 실제 이동 반영은 ZoneUpdate으로 클라이언트가 받게 됨
    void Move
    (
        in FLocation Direction,
        in FLocation Dest,
        in float speed,
        in bool IsWalk,
        in bool IsWeapon,
        out EMoveResult Result
    );

    void GameEnd
    (
        out Job WinJob
    );
    void GameStart
    (
        out List<PcInfoBr> JobsAndPos,
    );

    void Attack
    (
        in List<AttackInfo> AttackInfos,
        out List<AttackResult> Results
    );
    void CollectParts
    (
        in int Index,
        out PartsType type,
    );
    void AddGun
    (
        out int Index,
        in void
    );
};
